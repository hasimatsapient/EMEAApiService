buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
    }
    dependencies {
    
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

def springVersion = '4.2.3.RELEASE'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot' 
apply plugin: 'war'
apply plugin: 'jacoco'
apply plugin: 'application'
configurations {
    providedRuntime
}


jar {
    baseName = 'emeaapiservice'
    version = '0.0.1-SNAPSHOT'
}
war {
    baseName = 'emeaapiservice'
    version =  '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.fork = true
//compileJava.options.forkOptions.executable = 'C:/Program Files/Java/jdk1.8.0_65'
repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
}
/*
configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}*/
dependencies {
//compile files("C:/Program Files/Java/jdk1.8.0_65/lib/tools.jar")
    compile("com.h2database:h2:1.4.190")
   compile("org.springframework.boot:spring-boot-starter-data-jpa"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
        exclude module: 'org.hibernate:hibernate'
    }
compile("org.springframework.boot:spring-boot-starter-web"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    compile('org.springframework.boot:spring-boot-starter-jersey'){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    compile ("org.springframework.data:spring-data-oracle:1.1.0.RELEASE"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    compile ("org.springframework:spring-context:$springVersion"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
        exclude module: 'org.hibernate:hibernate'
    }
    compile ("org.springframework:spring-jdbc:$springVersion"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    compile("org.springframework.boot:spring-boot-starter-security"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    
    compile("org.springframework.security.oauth:spring-security-oauth2"){
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    
    compile("org.apache.httpcomponents:httpclient:4.5")
    compile("commons-io:commons-io:2.4")
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-collections:commons-collections:3.2.2'
    compile "org.slf4j:slf4j-log4j12:1.7.13"
    compile ("com.oracle:ojdbc6:11.2.0.3")
    compile ("io.springfox:springfox-swagger2:2.6.1")
    compile ("io.springfox:springfox-swagger-ui:2.6.1")
    
    //io.springfox:springfox-swagger2:2.6.1
    //springfox-swagger-ui
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'log4j-slf4j-impl'
        exclude module: 'jul-to-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'logback'
        exclude module: 'spring-boot-starter-logging'
    }
    
    testCompile 'junit:junit:4.12'
   
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.mockrunner:mockrunner-jdbc:1.1.0'
    testCompile 'org.powermock:powermock-api-mockito:1.6.3'
    testCompile 'org.powermock:powermock-module-junit4:1.6.3'
    
    
    
    
    
}


mainClassName = 'com.emea.Application'
applicationDistribution.from('conf') {
    into 'conf'
}
applicationDistribution.from('docs') {
    into 'docs'
}
eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

test {
    ignoreFailures = true
    beforeTest { descriptor -> logger.lifecycle("Running $descriptor") }
    jvmArgs += [ "-XX:MaxPermSize=512m" ]
}

jacocoTestReport {
    group = "Reporting"
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

startScripts {
    doLast {
        unixScript.text=unixScript.text.replace('cd "$SAVED"', 'cd "$SAVED/.."')
        unixScript.text=unixScript.text.replace('exec', '')
        
        windowsScript.text =  windowsScript.text.replace('set APP_HOME=%DIRNAME%..', 'set APP_HOME=.' + TextUtil.windowsLineSeparator + 'cd ..')
    }
}